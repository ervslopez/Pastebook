@model PastebookApp.Models.UserModel
@Html.Partial("EditProfile")

@{
    Session["page"] = "Profile";
}
<div class="container">
    <div class="Banner">
        <div>
            @{
                var imgSrc = "";
                if (Model.PROFILE_PIC != null)
                {
                    var base64 = Convert.ToBase64String(Model.PROFILE_PIC);
                    imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                }
                else
                {
                    imgSrc = "../../Content/Images/default_Male.png";
                }
            }
            <img src=@imgSrc alt="Profile Picture" class="viewMainProfile img-thumbnail" />
        </div>
    </div>
    <div>
        @{
            if (Model.USER_NAME == Session["username"].ToString())
            {
                <button type="button" value="Edit Profile" class="pull-right" id="btnEditPic" onclick="EditProfile()"><span class="glyphicon glyphicon-edit">EDIT</span></button>
            }
        }
    </div>
    <div class="row" id="viewProfileDetails">
        <div class="col-md-4" id="profileDetails">
            <div class="dl-horizontal">
                <div id="usernameBig">
                    <strong>
                        @Html.DisplayFor(model => model.USER_NAME)
                    </strong>
                </div>
                <div id="emailView">
                    @Html.DisplayFor(model => model.EMAIL, new {htmlAttributes = new { @class= "emailSignup" } })
                </div>
                <div>
                    @{
                        if (Model.ABOUT_ME != null)
                        {
                            <p>"@Html.DisplayFor(model => model.ABOUT_ME)"</p>
                        }
                        else if (Model.USER_NAME == Session["username"].ToString())
                        {
                            <p>Tell us something about you</p>
                        }
                    }
                </div>
                <div id="nameView">
                    - @Html.DisplayFor(model => model.FIRST_NAME) @Html.DisplayFor(model => model.LAST_NAME)
                </div>
                <div>
                    <span class="glyphicon glyphicon-calendar"></span>
                    <span>Born on @Model.BIRTHDAY.ToString("MMM dd, yyyy")</span>
                </div>
                <div>
                    <span class="glyphicon glyphicon-gift"></span>
                    <span>Joined @Model.DATE_CREATED.ToString("MMM yyyy")</span>
                </div>
                @{
                    var country = (string)Session["country"];

                }
                <div>
                    <span class="glyphicon glyphicon-map-marker"></span>
                    <span>@country</span>
                </div>

                <div>
                    <span class="glyphicon glyphicon-phone-alt"></span>
                    <span>@Html.DisplayFor(model => model.MOBILE_NO)</span>
                </div>

                <div>
                    @{
                        if (Model.GENDER.Equals("M"))
                        {
                            <p>Male</p>
                        }
                        else if (Model.GENDER.Equals("F"))
                        {
                            <p>Female</p>
                        }
                        else
                        {

                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="postsPage">
                @{
                    Html.RenderAction("ViewPosts", "Pastebook", new { ID = Model.ID });
                }
            </div>
        </div>
    </div>
</div>

@section Scripts{

    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var postUrl = '@Url.Action("PublishPost", "Pastebook")';
        var commentOnPostURL = '@Url.Action("CommentOnPost", "Pastebook")';
        var likePostURL = '@Url.Action("LikePost", "Pastebook")';
        var reloadUrl = '@Url.Action("ViewPosts", "Pastebook", new { ID = Model.ID })';

        function newPost() {
            var postString = $("#postTxt").val();

            if (postString.length > 0) {
                var data = {
                    profileOwner:@Model.ID,
                    postString : postString
                }

                $.ajax({
                    url: postUrl,
                    data: data,
                    success: function (data) {
                        SuccessPost(data)
                    },
                    error: function () {
                        alert("Somethin Went Wrong");
                    }
                });

                var SuccessPost = function(data){
                    $("#postTxt").val("");
                    $(".postsPage").load(reloadUrl);
                }

            } else {
                alert("Can't post nothin!");
            }
        }

        function commentOnPost(ID) {
            var comment = $("#"+ID.toString()).val();

            if (comment.length > 0) {
                var data = {
                    postID: ID,
                    comment: comment
                }
                $.ajax({
                    url: commentOnPostURL,
                    data: data,
                    success: function (data) {
                        SuccessPost(data)
                    },
                    error: function () {
                        alert("Somethin Went Wrong");
                    }
                });

                var SuccessPost = function (data) {
                    $("#commentTxt").val("");
                    $(".postsPage").load(reloadUrl);
                }

            } else {
                alert("Can't post nothin!");
            }
        }

        function likePost(ID){
            var data = {
                postID: ID
            }
            $.ajax({
                url: likePostURL,
                data: data,
                success: function (data) {
                    SuccessPost(data)
                },
                error: function () {
                    alert("Somethin Went Wrong");
                }
            });

            var SuccessPost = function (data) {
                $("#commentTxt").val("");
                $(".postsPage").load(reloadUrl);
            }
        }

        function EditProfile(){
            $('#editProfileModal').modal('show');
        }

        $("#EditImagePath").on('change', function () {
            if (typeof (FileReader) != "undefined") {
                var size = parseFloat($("#EditImagePath")[0].files[0].size / (1024)).toFixed(2);
                var ext = $('#EditImagePath').val().split('.').pop().toLowerCase();

                if ($.inArray(ext, ['png', 'jpg', 'jpeg']) != -1) {
                    if(size < 30){
                        var image_holder = $("#EditImageHolder");
                        image_holder.empty();

                        var reader = new FileReader();
                        reader.onload = function (e) {
                            $('#imagePreview').attr('src', e.target.result);
                        }
                        reader.readAsDataURL($(this)[0].files[0]);
                    }else{
                        $('#imagePreview').attr('src', '');
                        $('#errorValidation').text("Image should not exceed 30 KB!");
                    }
                }else{
                    $('#imagePreview').attr('src', '');
                    $('#errorValidation').text("Invalid Image Format");
                }
            } else {
                $('#imagePreview').attr('src', '');
                $('#errorValidation').text("Something went wrong.");
            }
        });

    </script>

}
